---
import { CollectionEntry, getCollection } from "astro:content";

type Props = { article: CollectionEntry<"article"> };

export const getStaticPaths = async () => {
  const articles = await getCollection("article");

  return articles.map((article) => ({
    params: { slug: article.slug },
    props: {
      article,
    },
  }));
};

import BaseLayout from "@/layouts/BaseLayout.astro";
import { z } from "astro:content";
import { MdDetail } from "@/components/MdDetail";

const frontmatterSchema = z.object({
  excerpt: z.string(),
  minutesRead: z.string(),
});

const { article } = Astro.props;
const {
  title,
  createdAt,
  updatedAt,
  emoji,
  tags,
  description: maybeDescription,
} = article.data;
const { Content, remarkPluginFrontmatter } = await article.render();
const frontmatter = frontmatterSchema.parse(remarkPluginFrontmatter);

const contentDescription = maybeDescription ?? frontmatter.excerpt;
const ogpImageUrl = new URL(`/ogp/${article.slug}.png`, Astro.url);
---

<BaseLayout
  title={title}
  description={contentDescription}
  ogpImage={ogpImageUrl.toString()}
>
  <MdDetail
    title={title}
    emoji={emoji}
    createdAt={createdAt}
    updatedAt={updatedAt}
    tags={tags}
    metas={[
      {
        key: "readingTime",
        name: "reading time",
        value: frontmatter.minutesRead,
      },
    ]}
  >
    <Content />
  </MdDetail>
</BaseLayout>
