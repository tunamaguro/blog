---
import { render, type CollectionEntry } from "astro:content";
import { getArticles } from "@/utils/getArticles";

type Props = { article: CollectionEntry<"article"> };

export const getStaticPaths = async () => {
  const articles = await getArticles();

  return articles.map((article) => ({
    params: { slug: article.id },
    props: {
      article,
    },
  }));
};

import BaseLayout from "@/layouts/BaseLayout.astro";
import { z } from "astro:content";
import { MdDetail } from "@/components/MdDetail";
import Giscus from "@/components/Giscus/index.astro";

const frontmatterSchema = z.object({
  excerpt: z.string(),
  minutesRead: z.string(),
});

const { article } = Astro.props;
const {
  title,
  createdAt,
  updatedAt,
  emoji,
  tags,
  description: maybeDescription,
} = article.data;

const { Content, remarkPluginFrontmatter } = await render(article);
const frontmatter = frontmatterSchema.parse(remarkPluginFrontmatter);

const contentDescription = maybeDescription ?? frontmatter.excerpt;
const ogpImageUrl = new URL(`/ogp/${article.id}.png`, Astro.url);
---

<BaseLayout
  title={title}
  description={contentDescription}
  ogpImage={ogpImageUrl.toString()}
>
  <div class="py-8">
    <MdDetail
      title={title}
      emoji={emoji}
      createdAt={createdAt}
      updatedAt={updatedAt}
      tags={tags}
      slug={article.id}
      metas={[
        {
          key: "readingTime",
          name: "reading time",
          value: frontmatter.minutesRead,
        },
      ]}
    >
      <Content />
    </MdDetail>
    <Giscus />
  </div>
</BaseLayout>
